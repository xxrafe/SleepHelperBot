# import pytest
# from pytest_mock import mocker
# import telebot
# from telebot import types
# from unittest.mock import Mock
# import Sleep_helper_bot
#
#
# def test_start(mocker):
#     telebot.TeleBot.send_message = Mock()
#     types.ReplyKeyboardMarkup = Mock()
#     types.KeyboardButton = Mock()
#     message = Mock()
#     message.text = "/start"
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
#     sup1 = types.KeyboardButton('–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã? üò∞')
#     markup.add(sup1)
#     Sleep_helper_bot.start(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id, "–ü—Ä–∏–≤–µ—Ç üôÇ", reply_markup=markup)
#
#
# def test_start2_hello(mocker):
#     telebot.TeleBot.send_message = Mock()
#     types.ReplyKeyboardMarkup = Mock()
#     types.KeyboardButton = Mock()
#     message = Mock()
#     message.text = "–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã? üò∞"
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
#     sup2 = types.KeyboardButton('–î–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º!')
#     markup.add(sup2)
#     Sleep_helper_bot.start2(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id,
#                          '–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞ –ª—é–¥–µ–π. –°–æ –≤—Ä–µ–º–µ–Ω–µ–º —Ç—ã —É–∑–Ω–∞–µ—à—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ —è —É–º–µ—é üòÅ',
#                          reply_markup=markup)
#
#
# def test_start2_start(mocker):
#     telebot.TeleBot.send_message = Mock()
#     types.ReplyKeyboardMarkup = Mock()
#     types.KeyboardButton = Mock()
#     message = Mock()
#     message.text = "–î–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º!"
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
#     Button1 = types.KeyboardButton('–ú–µ–Ω—é')
#     markup.add(Button1)
#     Sleep_helper_bot.start2(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id, '–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=markup)
#
#
# def test_start2_menu(mocker):
#     telebot.TeleBot.send_message = Mock()
#     types.ReplyKeyboardMarkup = Mock()
#     types.KeyboardButton = Mock()
#     message = Mock()
#     message.text = "–ú–µ–Ω—é"
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
#     Button1 = types.KeyboardButton('–•–æ—á—É —É—Å–Ω—É—Ç—å –≤...')
#     Button2 = types.KeyboardButton('–•–æ—á—É –≤—Å—Ç–∞—Ç—å –≤...')
#     Button3 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞')
#     Button4 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
#     Button5 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
#     Button6 = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Å–≤–æ–π id')
#     markup.add(Button1, Button2, Button3, Button4, Button5, Button6)
#     Sleep_helper_bot.start2(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id, '–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ú–µ–Ω—é', reply_markup=markup)
#
#
# def test_start2_info(mocker):
#     telebot.TeleBot.send_message = Mock()
#     message = Mock()
#     message.text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
#     Sleep_helper_bot.start2(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id, ' ‚Ä¢ —Ö–æ—á—É —É—Å–Ω—É—Ç—å –≤.../—Ö–æ—á—É –≤—Å—Ç–∞—Ç—å –≤... - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –µ–º—É —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –∏–ª–∏ –∂–µ –ø–æ–π—Ç–∏ —Å–ø–∞—Ç—å, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–∏–ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ñ–∞–∑–∞—Ö —Å–Ω–∞, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –¥–ª–∏—Ç—Å—è ‚âà 90 –º–∏–Ω—É—Ç\n ‚Ä¢ –ü–æ–≥–æ–¥–∞ - –≤—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∂–∏–≤–µ—Ç–µ, —á—Ç–æ–±—ã —É—Ç—Ä–æ–º, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–æ—Å—ã–ø–∞–ª–∏—Å—å –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –ø–æ–≥–æ–¥–∞ \n ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è (–æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) \n ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–∞—Ö –≤ –º–µ–Ω—é')
#
#
# def test_start2_sleep(mocker):
#     telebot.TeleBot.send_message = Mock()
#     telebot.TeleBot.register_next_step_handler = Mock()
#     Sleep_helper_bot.sleeptime = Mock()
#     message = Mock()
#     message.text = "–•–æ—á—É —É—Å–Ω—É—Ç—å –≤..."
#     Sleep_helper_bot.start2(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏ —Å–ø–∞—Ç—å \n(–Ω–∞–ø—Ä–º–µ—Ä: 12:37, 0:59, 23:08)')
#     Sleep_helper_bot.bot.register_next_step_handler.assert_called_with(message, Sleep_helper_bot.sleeptime)
#
#
# def test_start2_wake(mocker):
#     telebot.TeleBot.send_message = Mock()
#     telebot.TeleBot.register_next_step_handler = Mock()
#     Sleep_helper_bot.wakeup = Mock()
#     message = Mock()
#     message.text = "–•–æ—á—É –≤—Å—Ç–∞—Ç—å –≤..."
#     Sleep_helper_bot.start2(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞—Ç—å \n(–Ω–∞–ø—Ä–º–µ—Ä: 6:48, 8:00, 11:50)')
#     Sleep_helper_bot.bot.register_next_step_handler.assert_called_with(message, Sleep_helper_bot.wakeup)
#
#
# def test_start2_id(mocker):
#     telebot.TeleBot.send_message = Mock()
#     message = Mock()
#     message.text = "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π id"
#     Sleep_helper_bot.start2(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id, f"–≤–∞—à id: {message.from_user.id}")
#
#
# def test_start2_weather(mocker):
#     telebot.TeleBot.send_message = Mock()
#     telebot.TeleBot.register_next_step_handler = Mock()
#     Sleep_helper_bot.get_weather = Mock()
#     message = Mock()
#     message.text = "–ü–æ–≥–æ–¥–∞"
#     Sleep_helper_bot.start2(message)
#     Sleep_helper_bot.bot.send_message.assert_called_with(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
#     Sleep_helper_bot.bot.register_next_step_handler.assert_called_with(message, Sleep_helper_bot.get_weather)